const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');
const User = require('../models/Users');
const Booking = require('../models/Booking');
const Seat = require('../models/Seat');
const sequelize = require('sequelize');
const auth = require('../middleware/auth');

// Signup route
router.post('/signup', async (req, res) => {
  try {
    const { name, phoneNumber, email, password } = req.body;

    // Check if user already exists
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create new user
    const user = await User.create({
      name,
      phoneNumber,
      email,
      password: hashedPassword
    });
    // Note: userId will be automatically generated by Sequelize

    // Generate JWT token
    const token = jwt.sign(
      { userId: user.userId },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    res.status(201).json({
      message: 'User created successfully',
      token,
      userId: user.userId
    });
  } catch (error) {
    res.status(500).json({ message: 'Error creating user', error: error.message });
  }
});

// Login route
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Check if user exists
    const user = await User.findOne({ 
      where: { email },
      attributes: ['userId', 'password', 'is_admin'] // explicitly include is_admin
    });
    
    console.log('User data:', user.toJSON()); // Add this line to debug

    // Verify password
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Generate JWT token
    const token = jwt.sign(
      { userId: user.userId },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    res.json({
      message: 'Login successful',
      token,
      userId: user.userId,
      is_admin: user.is_admin
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Error logging in', error: error.message });
  }
});

// Add this new route for admin to get user list with booking counts
router.get('/users', auth, async (req, res) => {
  try {
    // Check if user is admin
    if (!req.user.is_admin) {
      return res.status(403).json({ message: 'Admin access required' });
    }

    const users = await User.findAll({
      attributes: [
        'userId',
        'name',
        'email',
        'phoneNumber',
        [
          sequelize.literal(`(
            SELECT COUNT(DISTINCT "BookingSeats"."seatId")
            FROM "Bookings"
            LEFT JOIN "BookingSeats" ON "Bookings"."bookingId" = "BookingSeats"."bookingId"
            WHERE "Bookings"."userId" = "User"."userId"
            AND "Bookings"."status" = 'active'
          )`),
          'totalBookedSeats'
        ]
      ],
      raw: true
    });

    // Format response
    const formattedUsers = users.map(user => ({
      userId: user.userId,
      name: user.name,
      email: user.email,
      phoneNumber: user.phoneNumber,
      totalBookedSeats: parseInt(user.totalBookedSeats) || 0
    }));

    res.json(formattedUsers);
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ message: 'Error fetching users', error: error.message });
  }
});

module.exports = router;
